import 'dart:convert';
import 'dart:io';

import 'package:applanga_flutter/src/applanga_exception.dart';
import 'package:intl/locale.dart';
import 'package:path/path.dart' as path;
import 'package:yaml/yaml.dart' as yaml;

class ApplangaConfig {
  String get _rootDirPath => Directory.current.path;

  String get originAppLocalizationsClassPath => path.join(_rootDirPath,
      '.dart_tool/flutter_gen/gen_l10n/$_flutterAutoGeneratedLocalizationFile');

  String get originAppLocalizationsBaseLanguageClassPath => path.join(
      _rootDirPath,
      '.dart_tool/flutter_gen/gen_l10n/$_flutterAutoGeneratedLocalizationFileBaseLanguage');

  String _destinationPath = 'lib/generated';
  String _destinationClassFileName = 'applanga_localizations.dart';
  String _className = 'ApplangaLocalizations';

  String get className => _className;

  late String _arbDir;

  String get arbDir => _arbDir;

  late String _arbTemplateFileName;

  String get arbTemplateFileName => _arbTemplateFileName;

  String get arbTemplateFilePath =>
      path.join(_rootDirPath, arbDir, _arbTemplateFileName);

  late String _flutterAutoGeneratedLocalizationFile;

  late String _flutterAutoGeneratedLocalizationFileBaseLanguage;

  late String _accessToken;

  String get accessToken => _accessToken;

  List<String>? _updateGroups;

  List<String>? get updateGroups => _updateGroups;

  List<String>? _updateLanguages;

  List<String>? get updateLanguages => _updateLanguages;

  bool _updateSettingsfilesOnPull = true;

  bool get updateSettingsfilesOnPull => _updateSettingsfilesOnPull;

  String _baseLanguage = 'en';

  String get baseLanguage => _baseLanguage;

  String get destinationAppLocalizationsClassPath =>
      path.join(_rootDirPath, _destinationPath, _destinationClassFileName);

  String get applangaJson => """
{
  "app": {
    "access_token": "$accessToken",
    "base_language": "$baseLanguage",
    "pull": {
      "target": [
"""
      //{
      //  "language": "$baseLanguage",
      //  "export_empty": true,
      //  "file_format": "arb",
      //  "path": "$arbDir/$arbTemplateFileName"
      //},
      """
        {
          "includeMetadata": false,
          "exclude_languages": ["$baseLanguage"],
          "file_format": "arb",
          "path": "$arbDir/${replaceArbFileNameWithApplangaLocalePlaceholder(arbTemplateFileName)}"
        }
      ]
    },
    "push": {
      "source": [
"""
      //{
      //  "file_format": "arb",
      //  "path": "$arbDir/${replaceArbFileNameWithApplangaLocalePlaceholder(arbTemplateFileName)}"
      //}
      """  
        {
          "file_format": "arb",
          "language": "$baseLanguage",
          "path": "$arbDir/$arbTemplateFileName"
        }
      ]
    }
  }
}
""";
  static final ApplangaConfig _instance = ApplangaConfig._internal();

  factory ApplangaConfig() => _instance;

  ApplangaConfig._internal() {
    parsePubspec();
    parseL10n();
  }

  void parsePubspec() {
    final pubspecFile = getPubspec();
    if (pubspecFile == null) {
      throw ApplangaConfigException("pubspec.yaml not found.");
    }
    stdout.writeln("-> pubspec.yaml parsing: ${pubspecFile.path}");
    var pubspecYaml = yaml.loadYaml(pubspecFile.readAsStringSync());

    // check if flutter localization generation is turned on
    var flutterConfig = pubspecYaml['flutter'];
    if (!(flutterConfig['generate'] ?? false)) {
      throw ApplangaConfigException(
          "Applanga works with flutters localization generator.\n"
          "It's not turned on for '${pubspecYaml["name"]}'.\n"
          "Check out the docs: "
          "https://www.applanga.com/docs/integration-documentation/flutter");
    }
    // check applanga configs
    var applangaConfig = pubspecYaml['applanga_flutter'];
    if (applangaConfig == null) {
      throw ApplangaConfigException(
          "No applanga_flutter config found in pubspec.yaml.");
    }

    var accessToken = applangaConfig["access_token"];
    if (accessToken != null && accessToken is String) {
      _accessToken = accessToken;
    } else {
      throw ApplangaConfigException("access_token is not set.");
    }

    var updateSettingsfilesOnPullTmp =
        applangaConfig["update_settingsfiles_on_pull"];
    if (updateSettingsfilesOnPullTmp is bool) {
      _updateSettingsfilesOnPull = updateSettingsfilesOnPullTmp;
    }

    var groups = applangaConfig["update_groups"];
    if (groups != null && groups is yaml.YamlList) {
      _updateGroups = List<String>.from(groups.value);
    }

    var languages = applangaConfig["update_languages"];
    if (languages != null && languages is yaml.YamlList) {
      _updateLanguages = List<String>.from(languages.value);
    }

    var className = applangaConfig["class_name"];
    if (className is String) {
      _className = className;
    }

    var classFileName = applangaConfig["class_filename"];
    if (classFileName is String) {
      _destinationClassFileName = classFileName;
    }

    var outputDir = applangaConfig["output_dir"];
    if (outputDir is String) {
      _destinationPath = outputDir;
    }
  }

  void parseL10n() {
    final l10nYamlFile = getL10nYaml();
    if (l10nYamlFile == null) {
      throw ApplangaConfigException("l10n.yaml not found.");
    }
    var l10nYaml = yaml.loadYaml(l10nYamlFile.readAsStringSync());

    var arbDir = l10nYaml['arb-dir'];
    if (arbDir != null && arbDir is String) {
      _arbDir = arbDir;
    } else {
      throw ApplangaConfigException("arb-dir is not set in l10n.yaml");
    }

    var templateArbFile = l10nYaml['template-arb-file'];
    if (templateArbFile != null && templateArbFile is String) {
      _arbTemplateFileName = templateArbFile;
    } else {
      throw ApplangaConfigException(
          "template-arb-file is not set in l10n.yaml");
    }

    var baseLanguage = _getBaseLanguageFromTemplateArb();
    if (baseLanguage != null) {
      _baseLanguage = baseLanguage;
    } else {
      throw ApplangaConfigException("@@locale is not set in $templateArbFile");
    }

    var outputLocalizationFile = l10nYaml['output-localization-file'];
    if (outputLocalizationFile != null && outputLocalizationFile is String) {
      _flutterAutoGeneratedLocalizationFile = outputLocalizationFile;
    } else {
      throw ApplangaConfigException(
          "output-localization-file is not set in l10n.yaml");
    }

    try {
      _flutterAutoGeneratedLocalizationFileBaseLanguage =
          "${_flutterAutoGeneratedLocalizationFile.split('.')[0]}_$_baseLanguage.dart";
      if (!File(originAppLocalizationsBaseLanguageClassPath).existsSync()) {
        throw Exception();
      }
    } catch (_) {
      throw ApplangaConfigException('Could not locate auto generated file for '
          'base language: $_baseLanguage');
    }
  }

  File? getPubspec() {
    var pubspecFilePath = path.join(_rootDirPath, 'pubspec.yaml');
    var pubspecFile = File(pubspecFilePath);
    return pubspecFile.existsSync() ? pubspecFile : null;
  }

  File? getL10nYaml() {
    var filePath = path.join(_rootDirPath, 'l10n.yaml');
    var file = File(filePath);
    return file.existsSync() ? file : null;
  }

  String? _getBaseLanguageFromTemplateArb() {
    var file = File(arbTemplateFilePath);
    Map<String, Object?> arbMap;
    try {
      arbMap = json.decode(file.readAsStringSync()) as Map<String, Object?>;
    } on FormatException catch (e) {
      throw ApplangaConfigException(
        'The arb file ${file.path} has the following formatting issue: \n'
        '${e.toString()}',
      );
    }
    var localeString = arbMap['@@locale'] as String?;
    if (localeString == null) {
      final regex = RegExp(r"_([\w-]+).arb$");
      if (regex.hasMatch(arbTemplateFileName)) {
        final matches = regex.allMatches(arbTemplateFileName);
        if (matches.isNotEmpty && matches.first.group(1) != null) {
          localeString = matches.first.group(1)!;
          final locale = Locale.tryParse(matches.first.group(1)!);
          if (locale == null) {
            localeString = null;
          }
        }
      }
    }
    return localeString;
  }

  String replaceArbFileNameWithApplangaLocalePlaceholder(String fileName) {
    for (int index = 0; index < fileName.length; index++) {
      if (fileName[index] == '_') {
        var localeString =
            fileName.substring(index + 1, fileName.length - '.arb'.length);
        if (localeString == baseLanguage) {
          return "${fileName.substring(0, index + 1)}<language>${fileName.substring(index + 1 + localeString.length)}";
        }
      }
    }
    throw ApplangaConfigException(
        "Baselanguage $baseLanguage not found in filename: $fileName");
  }

  /// Gets arb file for the given locale.
  File? getArbFileForLocale({
    String locale = "en",
    /* String arbDir =""*/
  }) {
    var arbDir = path.join(_rootDirPath, 'lib/l10n');
    var arbFilePath = path.join(arbDir, 'intl_$locale.arb');
    var arbFile = File(arbFilePath);

    return arbFile.existsSync() ? arbFile : null;
  }
}
